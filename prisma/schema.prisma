// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  examResults ExamResult[]
}

enum Role {
  ADMIN
  STUDENT
}

// Question model
model Question {
  id         String     @id @default(uuid())
  slug       String     @unique
  title      String
  category   Category
  difficulty Difficulty
  active     Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  answers       Answer[]
  examQuestions ExamQuestion[]
}

model Answer {
  id         String   @id @default(uuid())
  text       String
  isCorrect  Boolean
  questionId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

enum Category {
  LIFE_PATH
  DESTINY_NUMBER
  SOUL_URGE
  PERSONALITY_NUMBER
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

// Exam Results
model ExamResult {
  id          String   @id @default(uuid())
  userId      String
  score       Float
  passed      Boolean
  startedAt   DateTime @default(now())
  completedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id])
  examQuestions ExamQuestion[]
}

// Junction table for exam questions and answers
model ExamQuestion {
  id         String   @id @default(uuid())
  examId     String
  questionId String
  userAnswer String? // ID of the answer selected by user
  isCorrect  Boolean?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  exam     ExamResult @relation(fields: [examId], references: [id])
  question Question   @relation(fields: [questionId], references: [id])

  @@unique([examId, questionId])
}

// Test Settings
model TestSettings {
  id                      String   @id @default(uuid())
  timeLimit               Int // in minutes
  questionsPerTest        Int
  passingScore            Float // percentage
  randomizeQuestions      Boolean  @default(true)
  showFeedbackImmediately Boolean  @default(true)
  allowRetake             Boolean  @default(true)
  retakeWaitingPeriod     Int // in hours
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Category weights
  lifepathWeight    Float @default(25)
  destinyWeight     Float @default(25)
  soulUrgeWeight    Float @default(25)
  personalityWeight Float @default(25)
}
